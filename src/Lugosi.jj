PARSER_BEGIN(Lugosi)
import java.io.*;
import java.util.*;

public class Lugosi {

	public static void main(String args[]) throws ParseException,IOException {

		Lugosi analisador = new Lugosi(new FileInputStream(args[0]));
		LugosiTree tree = analisador.Lugosi();

		LugosiPrinter printer = new LugosiPrinter(tree);
	}

}

class LugosiTree {
	Main main;
	ArrayList <Func> funcoes;

	LugosiTree(Main m, ArrayList<Func> f){
		this.main = m; 
		this.funcoes = f;
	}
}

class Main {
	ArrayList <VarDecl> varD;
	ArrayList <Comando> comandos;

	Main(ArrayList <VarDecl> varD, ArrayList <Comando> comandos){
		this.varD = varD;
		this.comandos = comandos;
	}
}

class VarDecl {
	String tipo;
	String var;

	VarDecl(Token id, String tipo){
		this.var = id.image;
		this.tipo = tipo;
	}
}

class SeqComandos {
	ArrayList <Comando> comandos;

	SeqComandos(ArrayList <Comando> c) {
		this.comandos = c;
	}
}

class Comando {}

class CmdAtribuicao extends Comando {
	String var;
	Exp e;

	CmdAtribuicao(Token id, Exp cmd){ 
		this.var = id.image;
		this.e = cmd;
	}
}

class CmdChamadaFuncao extends Comando {
	String nomeFuncao;
	ArrayList <Exp> argumentos;

	CmdChamadaFuncao(Token id, ArrayList <Exp> arg){
		this.nomeFuncao = id.image;
		this.argumentos = arg;
	}
}

class CmdIf extends Comando {
	Exp exp;
	ArrayList <Comando> then;

	CmdIf(Exp e, ArrayList <Comando> seqComandos){
		this.exp = e;
		this.then = seqComandos;
	}
}

class CmdWhile extends Comando {
	Exp exp;
	ArrayList <Comando> comandos;

	CmdWhile(Exp e, ArrayList <Comando> seqComandos){
		this.exp = e;
		this.comandos = seqComandos;
	}
}

class CmdDoWhile extends Comando {
	ArrayList <Comando> comandos;
	Exp exp;

	CmdDoWhile(Exp e, ArrayList <Comando> seqComandos){
		this.comandos = seqComandos;
		this.exp = e;
	}
}

class CmdReturn extends Comando {
	Exp exp;

	CmdReturn(Exp e){
		this.exp = e;
	}
} 

class CmdPrint extends Comando {
	Exp exp;
	CmdPrint(Exp e){
		this.exp = e;
	}
}

class Exp {}

class ExpOperador extends Exp {
	Exp arg1;
	Exp arg2;
	String operador;

	ExpOperador(Exp a1, Exp a2, String operador){
		this.arg1 = a1;
		this.arg2 = a2;
		this.operador = operador;
	}
}

class Fator extends Exp {}

class FtrTokenId extends Fator {
	String id;

	FtrTokenId(String id){
		this.id = id;
	}
}

class FtrExpPar extends Fator {
	String id;
	ArrayList <Exp> listExp;

	FtrExpPar(String id, ArrayList <Exp> listExp){
		this.id = id;
		this.listExp = listExp;
	}
}

class FtrNumLiteral extends Fator {
	String numLiteral;

	FtrNumLiteral(String numLiteral){
		this.numLiteral = numLiteral;
	}
}

class FtrTipo extends Fator {
	String tipo;

	FtrTipo(String tipo){
		this.tipo = tipo;
	}
}

class ListaExp {
	Exp e;

	ListaExp(Exp e){
		this.e = e;
	}
}

class Func{
	String id;
	String tipo;
	ArrayList <ListaArg> argumentos;
	ArrayList <VarDecl> vd;
	ArrayList <Comando> seqComandos;

	Func(Token id, String tipo, ArrayList <ListaArg> argumentos, ArrayList <VarDecl> vd, ArrayList <Comando> seqComandos){
		this.id = id.image;
		this.tipo = tipo;
		this.argumentos = argumentos;
		this.vd = vd;
		this.seqComandos = seqComandos;
	}
}

class ListaArg{
	String tipo;
	String id;

	ListaArg(String tipo, Token id){
		this.tipo = tipo;
		this.id = id.image;
	}
}

PARSER_END(Lugosi)

SKIP :
{
	  " "
	| "\t"
	| "\n"
	| "\r"
}

TOKEN :
{
	  <MAIN: "main">
	| <VARDECL: "var">
	| <TIPO_INT: "int">
	| <TIPO_BOOL: "bool">
	| <TIPO_FLOAT: "float">
	| <TIPO_VOID: "void">
	| <ACHAVES: "{">
	| <FCHAVES: "}">
	| <APARENT: "(">
	| <FPARENT: ")">

	| <BOOL_FALSE: "false">
	| <BOOL_TRUE: "true">

	| <IF: "if">
	| <WHILE: "while">
	| <DO: "do">
	| <RETURN: "return">
	| <PRINT: "print">
	| <FUNCTION: "function">

	| <ASSIGN: ":=">
	| <EOL: ";">
	| <VIRG: ",">
	| <PLUS: "+" >
	| <MINUS:	"-" >
	| <MULT:	"*" >
	| <DIV:	"/" >
	| <AND:	"&&" >
	| <OR:	"||" >
	| <LESSTHAN:	"<" >
	| <MORETHAN:	">" >
	| <EQUAL:	"==">
}

TOKEN :
{
	  <NUM: (["0"-"9"])(".")*(["0"-"9"])*>
	| <ID: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9","-","_"])*>

}

LugosiTree Lugosi () :
{
	Main main; 
	ArrayList <Func> funcoes = new ArrayList<Func>();
}
{
	main = Main() funcoes = Func()
	<EOF>

	{return new LugosiTree(main, funcoes);}
}

Main Main () :
{ 
	ArrayList <VarDecl> vardecl; 
	ArrayList <Comando> comandos; 
}
{
	<MAIN> <ACHAVES> vardecl = VarDecl() comandos = SeqComandos() <FCHAVES>
	{ return new Main(vardecl, comandos); }
}

ArrayList <VarDecl> VarDecl () :
{ 
	ArrayList <VarDecl> varDecls = new ArrayList<VarDecl> (); 
	String tipo; 
	String var; 
	Token id;
}
{
	(<VARDECL> tipo = Tipo() id = <ID> <EOL> { varDecls.add(new VarDecl(id, tipo)); })*
	{ return varDecls; }
}

String Tipo () :
{
	Token tipo;
}
{
	  tipo = <TIPO_BOOL> {return tipo.image;} 
	| tipo = <TIPO_FLOAT> {return tipo.image;} 
	| tipo = <TIPO_INT> {return tipo.image;} 
	| tipo = <TIPO_VOID> {return tipo.image;}
}

ArrayList <Comando> SeqComandos () :
{ 
	ArrayList <Comando> comandos = new ArrayList <Comando> (); 
	Comando comando;
}
{
	(comando = Comando() { comandos.add(comando); })* 
	{ return comandos; }
}

Comando Comando () : 
{
	Token id; 
	Exp exp; 
	Object comando; 
	ArrayList <Comando> seqComandos;
}
{
	  (id = <ID> comando = Comando_())
		{ 
			if (comando instanceof Exp) 
				return new CmdAtribuicao(id, (Exp)comando);
			else 
				return new CmdChamadaFuncao(id, (ArrayList<Exp>)comando); 
		}
	| (<IF> <APARENT> exp = Exp() <FPARENT> <DO> <ACHAVES> seqComandos = SeqComandos() <FCHAVES> <EOL>)
		{ return new CmdIf(exp, seqComandos); }
	| (<WHILE> <APARENT> exp = Exp() <FPARENT> <DO> <ACHAVES> seqComandos = SeqComandos() <FCHAVES> <EOL>)
		{ return new CmdWhile(exp, seqComandos); }
	| (<DO> <ACHAVES> seqComandos = SeqComandos() <FCHAVES> <WHILE> <APARENT> exp = Exp() <FPARENT> <EOL>)
		{ return new CmdDoWhile(exp, seqComandos); }
	| (<RETURN> exp = Exp() <EOL>)
		{ return new CmdReturn(exp); }
	| (<PRINT> <APARENT> exp = Exp() <FPARENT> <EOL>)
		{ return new CmdPrint(exp); }
}

Object Comando_ () :
{
	Object exp;
}
{
	  (<ASSIGN> exp = Exp() <EOL>) 
		{ return exp; }
	| (<APARENT> (exp = ListaExp()) <FPARENT> <EOL>)
		{ return exp; }
}

Exp Exp () : 
{
	Exp arg1; 
	Exp arg2; 
	String operador;
	Fator fator;
}
{
	  (<APARENT> arg1 = Exp() operador = Op() arg2 = Exp() <FPARENT>) 
		{ return new ExpOperador(arg1, arg2, operador); }
	| fator = Fator()
		{ return fator; }
}

ArrayList<Exp> ListaExp() : 
{
	Exp exp1; 
	Exp exp2; 
	ArrayList <Exp> expressoes = new ArrayList <Exp>();
}
{
	exp1 = Exp() (<VIRG> exp2 = Exp() {expressoes.add(exp2);})*
	{ expressoes.add(0, exp1); return expressoes; }
}

Fator Fator () :
{
	Token id; 
	ArrayList<Exp> exp = new ArrayList<Exp>();
}
{
	  id = <ID> ( <APARENT> (exp = ListaExp())? <FPARENT> )? 
		{ 
			if(exp.isEmpty()) 
				return new FtrTokenId(id.image);
			else 
				return new FtrExpPar(id.image, exp); 
		}
	| id = <NUM> { return new FtrNumLiteral(id.image); }
	| id = <BOOL_TRUE> { return new FtrTipo(id.image); }
	| id = <BOOL_FALSE> { return new FtrTipo(id.image); }
}

String Op() : 
{
	Token operador;
}
{
	  operador = <PLUS> 	{ return operador.image; }
	| operador = <MINUS> 	{ return operador.image; }
	| operador = <MULT> 	{ return operador.image; }
	| operador = <DIV> 		{ return operador.image; }
	| operador = <AND> 		{ return operador.image; }
	| operador = <OR> 		{ return operador.image; }
	| operador = <LESSTHAN> { return operador.image; }
	| operador = <MORETHAN> { return operador.image; }
	| operador = <EQUAL> 	{ return operador.image; }
}

ArrayList<Func> Func () : 
{ 
	ArrayList<Func> functions = new ArrayList<Func> (); 
	Token id; String tipo; ArrayList <ListaArg> argumentos;
	ArrayList <VarDecl> varDecls;
	ArrayList <Comando> seqComandos;
}
{
	(<FUNCTION> tipo = Tipo() id = <ID> <APARENT> argumentos = ListaArg() <FPARENT> 
	<ACHAVES> varDecls = VarDecl() seqComandos = SeqComandos() <FCHAVES>{functions.add(new Func( id, tipo, argumentos, varDecls, seqComandos));})*

	{
		return functions;
	}
}

ArrayList<ListaArg> ListaArg () : 
{
	ArrayList<ListaArg> argumentos = new ArrayList<ListaArg>(); 
	String tipo1; 
	String tipo2; 
	Token id1; 
	Token id2;
}
{
	tipo1 = Tipo() id1 = <ID> (<VIRG> tipo2 = Tipo() id2 = <ID> {argumentos.add(new ListaArg(tipo2, id2));})*
	
	{
		argumentos.add(0, new ListaArg(tipo1, id1)); // Pra entrar como primeiro Arg
		return argumentos;
	}
}