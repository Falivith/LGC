PARSER_BEGIN(Lugosi)
import java.io.*;
public class Lugosi {

  public static void main(String args[]) throws ParseException,IOException {
    
 Lugosi analisador = new Lugosi(new FileInputStream(args[0]));
 analisador.Lugosi();
  }

}

PARSER_END(Lugosi)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <MAIN: "main">
| <VARDECL: "var">
| <TIPO_INT: "int">
| <TIPO_BOOL: "bool">
| <TIPO_FLOAT: "float">
| <TIPO_VOID: "void">
| <ACHAVES: "{">
| <FCHAVES: "}">
| <APARENT: "(">
| <FPARENT: ")">

| <BOOL_FALSE: "false">
| <BOOL_TRUE: "true">

| <IF: "if">
| <WHILE: "while">
| <DO: "do">
| <RETURN: "return">
| <PRINT: "print">
| <FUNCTION: "function">

| <ASSIGN: ":=">
| <EOL: ";">
| <COMMA: ",">
| <PLUS: "+" >
| <MINUS:  "-" >
| <MULT:  "*" >
| <DIV:  "/" >
| <AND:  "&&" >
| <OR:  "||" >
| <LESSTHAN:  "<" >
| <MORETHAN:  ">" >
| <EQUAL:  "==">
}

TOKEN :
{
   <NUM : (["0"-"9"])(".")*(["0"-"9"])*>
 | <ID: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9","-","_"])*>

}

void Lugosi () : //FEITO
{}
{
  Main() (Func())*
  <EOF>
}

void Main () : //FEITO
{}
{
  <MAIN> <ACHAVES> Vardecl() SeqComandos() <FCHAVES>
}

void Vardecl () : //FEITO
{Token t;}
{
  Tipo() <ID> <EOL> Vardecl_()
}

void Vardecl_ () : //FEITO
{Token t;}
{
  (<ID> <EOL> Vardecl_())?
}

void Tipo () : //FEITO
{} 
{
  <TIPO_BOOL> | <TIPO_FLOAT> | <TIPO_INT> | <TIPO_VOID>
}

void SeqComandos () : //FEITO
{}
{
  Comando() SeqComandos_()
}

void SeqComandos_() : //FEITO
{}
{
  (Comando() SeqComandos_())?
}

void Comando () : //Implementar
{}
{
    (<ID> Comando_())
  | (<IF> <APARENT> Exp() <FPARENT> <DO> <ACHAVES> SeqComandos() <FCHAVES> <EOL>)
  | (<WHILE> <APARENT> Exp() <FPARENT> <DO> <ACHAVES> SeqComandos() <FCHAVES> <EOL>)
  | (<DO> <ACHAVES> SeqComandos() <FCHAVES> <WHILE> <APARENT> Exp() <FPARENT> <EOL>)
  | (<RETURN> )

}

void Comando_ () :
{}
{

}

void Exp () : 
{}
{
  (<APARENT> Exp() Op() Exp() <FPARENT>) | Fator()
}

void Fator () :
{}
{
  <ID> ( <APARENT> (ListaExp())? <FPARENT> )? |
  <NUM> | <BOOL_TRUE> | <BOOL_FALSE>
}

void Op () : // FEITO
{}
{
  <PLUS> | <MINUS> | 
  <MULT> | <DIV> | 
  <AND> | <OR> | 
  <LESSTHAN> | <MORETHAN> | <EQUAL> 
}

void ListaExp() : //FEITO
{}
{
  Exp() ListaExp_ :
}

void ListaExp_() : //FEITO
{}
{
  (<COMMA> Exp() ListaExp_())?
}

void Func () : //FEITO
{}
{
  <FUNCTION> Tipo() <ID> <APARENT> ListaArg() <FPARENT> 
  <ACHAVES> Vardecl() SeqComandos() <FCHAVES> Func_()
}

void Func_() : //FEITO
{}
{
  <FUNCTION> Tipo() <ID> <APARENT> (ListaArg())? <FPARENT>
  <ACHAVES> Vardecl() SeqComandos() <FCHAVES> Func_() 
}

void ListaArg () : //FEITO
{}
{
  Tipo() <ID> ListaArg_()
}

void ListaArg_ () : //FEITO
{}
{
  (<COMMA> Tipo() <ID> ListaArg_())?
}



{
  (
    <MAIN> { System.out.println("Palavra reservada: main");}
    | <VARDECL> { System.out.println("Declaração de Variável: var");}
    | <TIPO_INT> { System.out.println("Tipo Inteiro: int");}
    | <TIPO_BOOL> { System.out.println("Tipo Booleano: bool");}
    | <TIPO_FLOAT> { System.out.println("Tipo Inteiro: float");}
    | <TIPO_VOID> { System.out.println("Tipo Booleano: void");}
    | <ACHAVES> { System.out.println("Abre chaves: {");}
    | <FCHAVES> { System.out.println("Fecha chaves: }");}
    | <APARENT> { System.out.println("Abre parenteses: (");}
    | <FPARENT> { System.out.println("Fecha parenteses: )");}

    | <IF> { System.out.println("If: if");}
    | <WHILE> { System.out.println("While: while");}
    | <DO> { System.out.println("Do: do");}
    | <RETURN> { System.out.println("Retorno: return");}
    | <PRINT> { System.out.println("Imprime: print");}
    | <FUNCTION> { System.out.println("Função: function");}

    | <ASSIGN> { System.out.println("Assinala: := ");}
    | <EOL> { System.out.println("Fim de linha: ;");}
    | <COMMA> { System.out.println("Vírgula: ,");}
    | <PLUS> { System.out.println("Mais: +");}
    | <MINUS> { System.out.println("Menos: -");}
    | <MULT> { System.out.println("Asterisco: *");}
    | <DIV> { System.out.println("Barra: /");}
    | <AND> { System.out.println("And: &&");}
    | <OR> { System.out.println("Ou: ||");}
    | <LESSTHAN> { System.out.println("Menor que: <");}
    | <MORETHAN> { System.out.println("Maior que: >");}
    | <EQUAL> { System.out.println("Igual: ==");}

    | t = <NUM> { System.out.println("Número: " + t.image);}
    | t = <ID> { System.out.println("Identificador: " + t.image);}
  )*
  <EOF> 
}
