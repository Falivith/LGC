/* Generated By:JavaCC: Do not edit this line. Lugosi.java */
import java.io.*;
import java.util.*;

public class Lugosi implements LugosiConstants {

        public static void main(String args[]) throws ParseException,IOException {

                Lugosi analisador = new Lugosi(new FileInputStream(args[0]));
                LugosiTree tree = analisador.Lugosi();

                LugosiPrinter printer = new LugosiPrinter(tree);
        }

  static final public LugosiTree Lugosi() throws ParseException {
        Main main;
        ArrayList <Func> funcoes = new ArrayList<Func>();
    main = Main();
    funcoes = Func();
    jj_consume_token(0);
         {if (true) return new LugosiTree(main, funcoes);}
    throw new Error("Missing return statement in function");
  }

  static final public Main Main() throws ParseException {
        ArrayList <VarDecl> vardecl;
        ArrayList <Comando> comandos;
    jj_consume_token(MAIN);
    jj_consume_token(ACHAVES);
    vardecl = VarDecl();
    comandos = SeqComandos();
    jj_consume_token(FCHAVES);
          {if (true) return new Main(vardecl, comandos);}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList <VarDecl> VarDecl() throws ParseException {
        ArrayList <VarDecl> varDecls = new ArrayList<VarDecl> ();
        String tipo;
        String var;
        Token id;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARDECL:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(VARDECL);
      tipo = Tipo();
      id = jj_consume_token(ID);
      jj_consume_token(EOL);
                                                   varDecls.add(new VarDecl(id, tipo));
    }
          {if (true) return varDecls;}
    throw new Error("Missing return statement in function");
  }

  static final public String Tipo() throws ParseException {
        Token tipo;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TIPO_BOOL:
      tipo = jj_consume_token(TIPO_BOOL);
                              {if (true) return tipo.image;}
      break;
    case TIPO_FLOAT:
      tipo = jj_consume_token(TIPO_FLOAT);
                               {if (true) return tipo.image;}
      break;
    case TIPO_INT:
      tipo = jj_consume_token(TIPO_INT);
                             {if (true) return tipo.image;}
      break;
    case TIPO_VOID:
      tipo = jj_consume_token(TIPO_VOID);
                              {if (true) return tipo.image;}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList <Comando> SeqComandos() throws ParseException {
        ArrayList <Comando> comandos = new ArrayList <Comando> ();
        Comando comando;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case DO:
      case RETURN:
      case PRINT:
      case ID:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      comando = Comando();
                               comandos.add(comando);
    }
          {if (true) return comandos;}
    throw new Error("Missing return statement in function");
  }

  static final public Comando Comando() throws ParseException {
        Token id;
        Exp exp;
        Object comando;
        ArrayList <Comando> seqComandos;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      id = jj_consume_token(ID);
      comando = Comando_();
                        if (comando instanceof Exp)
                                {if (true) return new CmdAtribuicao(id, (Exp)comando);}
                        else
                                {if (true) return new CmdChamadaFuncao(id, (ArrayList<Exp>)comando);}
      break;
    case IF:
      jj_consume_token(IF);
      jj_consume_token(APARENT);
      exp = Exp();
      jj_consume_token(FPARENT);
      jj_consume_token(DO);
      jj_consume_token(ACHAVES);
      seqComandos = SeqComandos();
      jj_consume_token(FCHAVES);
      jj_consume_token(EOL);
                  {if (true) return new CmdIf(exp, seqComandos);}
      break;
    case WHILE:
      jj_consume_token(WHILE);
      jj_consume_token(APARENT);
      exp = Exp();
      jj_consume_token(FPARENT);
      jj_consume_token(DO);
      jj_consume_token(ACHAVES);
      seqComandos = SeqComandos();
      jj_consume_token(FCHAVES);
      jj_consume_token(EOL);
                  {if (true) return new CmdWhile(exp, seqComandos);}
      break;
    case DO:
      jj_consume_token(DO);
      jj_consume_token(ACHAVES);
      seqComandos = SeqComandos();
      jj_consume_token(FCHAVES);
      jj_consume_token(WHILE);
      jj_consume_token(APARENT);
      exp = Exp();
      jj_consume_token(FPARENT);
      jj_consume_token(EOL);
                  {if (true) return new CmdDoWhile(exp, seqComandos);}
      break;
    case RETURN:
      jj_consume_token(RETURN);
      exp = Exp();
      jj_consume_token(EOL);
                  {if (true) return new CmdReturn(exp);}
      break;
    case PRINT:
      jj_consume_token(PRINT);
      jj_consume_token(APARENT);
      exp = Exp();
      jj_consume_token(FPARENT);
      jj_consume_token(EOL);
                  {if (true) return new CmdPrint(exp);}
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Object Comando_() throws ParseException {
        Object exp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      exp = Exp();
      jj_consume_token(EOL);
                  {if (true) return exp;}
      break;
    case APARENT:
      jj_consume_token(APARENT);
      exp = ListaExp();
      jj_consume_token(FPARENT);
      jj_consume_token(EOL);
                  {if (true) return exp;}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Exp Exp() throws ParseException {
        Exp arg1;
        Exp arg2;
        String operador;
        Fator fator;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case APARENT:
      jj_consume_token(APARENT);
      arg1 = Exp();
      operador = Op();
      arg2 = Exp();
      jj_consume_token(FPARENT);
                  {if (true) return new ExpOperador(arg1, arg2, operador);}
      break;
    case BOOL_FALSE:
    case BOOL_TRUE:
    case NUM:
    case ID:
      fator = Fator();
                  {if (true) return fator;}
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList<Exp> ListaExp() throws ParseException {
        Exp exp1;
        Exp exp2;
        ArrayList <Exp> expressoes = new ArrayList <Exp>();
    exp1 = Exp();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRG:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_3;
      }
      jj_consume_token(VIRG);
      exp2 = Exp();
                                           expressoes.add(exp2);
    }
          expressoes.add(0, exp1); {if (true) return expressoes;}
    throw new Error("Missing return statement in function");
  }

  static final public Fator Fator() throws ParseException {
        Token id;
        ArrayList<Exp> exp = new ArrayList<Exp>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      id = jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case APARENT:
        jj_consume_token(APARENT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case APARENT:
        case BOOL_FALSE:
        case BOOL_TRUE:
        case NUM:
        case ID:
          exp = ListaExp();
          break;
        default:
          jj_la1[7] = jj_gen;
          ;
        }
        jj_consume_token(FPARENT);
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
                        if(exp.isEmpty())
                                {if (true) return new FtrTokenId(id.image);}
                        else
                                {if (true) return new FtrExpPar(id.image, exp);}
      break;
    case NUM:
      id = jj_consume_token(NUM);
                       {if (true) return new FtrNumLiteral(id.image);}
      break;
    case BOOL_TRUE:
      id = jj_consume_token(BOOL_TRUE);
                             {if (true) return new FtrTipo(id.image);}
      break;
    case BOOL_FALSE:
      id = jj_consume_token(BOOL_FALSE);
                              {if (true) return new FtrTipo(id.image);}
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String Op() throws ParseException {
        Token operador;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      operador = jj_consume_token(PLUS);
                                  {if (true) return operador.image;}
      break;
    case MINUS:
      operador = jj_consume_token(MINUS);
                                  {if (true) return operador.image;}
      break;
    case MULT:
      operador = jj_consume_token(MULT);
                                  {if (true) return operador.image;}
      break;
    case DIV:
      operador = jj_consume_token(DIV);
                                          {if (true) return operador.image;}
      break;
    case AND:
      operador = jj_consume_token(AND);
                                          {if (true) return operador.image;}
      break;
    case OR:
      operador = jj_consume_token(OR);
                                          {if (true) return operador.image;}
      break;
    case LESSTHAN:
      operador = jj_consume_token(LESSTHAN);
                                  {if (true) return operador.image;}
      break;
    case MORETHAN:
      operador = jj_consume_token(MORETHAN);
                                  {if (true) return operador.image;}
      break;
    case EQUAL:
      operador = jj_consume_token(EQUAL);
                                  {if (true) return operador.image;}
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList<Func> Func() throws ParseException {
        ArrayList<Func> functions = new ArrayList<Func> ();
        Token id; String tipo; ArrayList <ListaArg> argumentos;
        ArrayList <VarDecl> varDecls;
        ArrayList <Comando> seqComandos;
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FUNCTION:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_4;
      }
      jj_consume_token(FUNCTION);
      tipo = Tipo();
      id = jj_consume_token(ID);
      jj_consume_token(APARENT);
      argumentos = ListaArg();
      jj_consume_token(FPARENT);
      jj_consume_token(ACHAVES);
      varDecls = VarDecl();
      seqComandos = SeqComandos();
      jj_consume_token(FCHAVES);
                                                                             functions.add(new Func( id, tipo, argumentos, varDecls, seqComandos));
    }
                {if (true) return functions;}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList<ListaArg> ListaArg() throws ParseException {
        ArrayList<ListaArg> argumentos = new ArrayList<ListaArg>();
        String tipo1;
        String tipo2;
        Token id1;
        Token id2;
    tipo1 = Tipo();
    id1 = jj_consume_token(ID);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRG:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_5;
      }
      jj_consume_token(VIRG);
      tipo2 = Tipo();
      id2 = jj_consume_token(ID);
                                                                     argumentos.add(new ListaArg(tipo2, id2));
    }
                argumentos.add(0, new ListaArg(tipo1, id1)); // Pra entrar como primeiro Arg
                {if (true) return argumentos;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public LugosiTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[13];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40,0x780,0x3e0000,0x3e0000,0x802000,0x1a000,0x2000000,0x1a000,0x2000,0x18000,0xfc000000,0x400000,0x2000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x10,0x10,0x0,0x18,0x0,0x18,0x0,0x18,0x7,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public Lugosi(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Lugosi(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new LugosiTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Lugosi(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new LugosiTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Lugosi(LugosiTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(LugosiTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[37];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 13; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 37; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}

class LugosiTree {
        Main main;
        ArrayList <Func> funcoes;

        LugosiTree(Main m, ArrayList<Func> f){
                this.main = m;
                this.funcoes = f;
        }
}

class Main {
        ArrayList <VarDecl> varD;
        ArrayList <Comando> comandos;

        Main(ArrayList <VarDecl> varD, ArrayList <Comando> comandos){
                this.varD = varD;
                this.comandos = comandos;
        }
}

class VarDecl {
        String tipo;
        String var;

        VarDecl(Token id, String tipo){
                this.var = id.image;
                this.tipo = tipo;
        }
}

class SeqComandos {
        ArrayList <Comando> comandos;

        SeqComandos(ArrayList <Comando> c) {
                this.comandos = c;
        }
}

class Comando {}

class CmdAtribuicao extends Comando {
        String var;
        Exp e;

        CmdAtribuicao(Token id, Exp cmd){
                this.var = id.image;
                this.e = cmd;
        }
}

class CmdChamadaFuncao extends Comando {
        String nomeFuncao;
        ArrayList <Exp> argumentos;

        CmdChamadaFuncao(Token id, ArrayList <Exp> arg){
                this.nomeFuncao = id.image;
                this.argumentos = arg;
        }
}

class CmdIf extends Comando {
        Exp exp;
        ArrayList <Comando> then;

        CmdIf(Exp e, ArrayList <Comando> seqComandos){
                this.exp = e;
                this.then = seqComandos;
        }
}

class CmdWhile extends Comando {
        Exp exp;
        ArrayList <Comando> comandos;

        CmdWhile(Exp e, ArrayList <Comando> seqComandos){
                this.exp = e;
                this.comandos = seqComandos;
        }
}

class CmdDoWhile extends Comando {
        ArrayList <Comando> comandos;
        Exp exp;

        CmdDoWhile(Exp e, ArrayList <Comando> seqComandos){
                this.comandos = seqComandos;
                this.exp = e;
        }
}

class CmdReturn extends Comando {
        Exp exp;

        CmdReturn(Exp e){
                this.exp = e;
        }
}

class CmdPrint extends Comando {
        Exp exp;
        CmdPrint(Exp e){
                this.exp = e;
        }
}

class Exp {}

class ExpOperador extends Exp {
        Exp arg1;
        Exp arg2;
        String operador;

        ExpOperador(Exp a1, Exp a2, String operador){
                this.arg1 = a1;
                this.arg2 = a2;
                this.operador = operador;
        }
}

class Fator extends Exp {}

class FtrTokenId extends Fator {
        String id;

        FtrTokenId(String id){
                this.id = id;
        }
}

class FtrExpPar extends Fator {
        String id;
        ArrayList <Exp> listExp;

        FtrExpPar(String id, ArrayList <Exp> listExp){
                this.id = id;
                this.listExp = listExp;
        }
}

class FtrNumLiteral extends Fator {
        String numLiteral;

        FtrNumLiteral(String numLiteral){
                this.numLiteral = numLiteral;
        }
}

class FtrTipo extends Fator {
        String tipo;

        FtrTipo(String tipo){
                this.tipo = tipo;
        }
}

class ListaExp {
        Exp e;

        ListaExp(Exp e){
                this.e = e;
        }
}

class Func{
        String id;
        String tipo;
        ArrayList <ListaArg> argumentos;
        ArrayList <VarDecl> vd;
        ArrayList <Comando> seqComandos;

        Func(Token id, String tipo, ArrayList <ListaArg> argumentos, ArrayList <VarDecl> vd, ArrayList <Comando> seqComandos){
                this.id = id.image;
                this.tipo = tipo;
                this.argumentos = argumentos;
                this.vd = vd;
                this.seqComandos = seqComandos;
        }
}

class ListaArg{
        String tipo;
        String id;

        ListaArg(String tipo, Token id){
                this.tipo = tipo;
                this.id = id.image;
        }
}
